{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Getting Started"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"lectures/1.Introduction/","text":"\ud83d\udcd3 Python Programming - Introduction to Python \ud83d\udfe2 1. What exactly is Python? Python is a high-level, interpreted, general-purpose programming language known for its simplicity and readability. It is widely used for: Web Development Data Science Machine Learning & AI Automation & Scripting Software Development Game Development Key Features: Easy to learn & use Open-source & community-driven Extensive libraries & frameworks Cross-platform Supports multiple programming paradigms (procedural, object-oriented, functional) \ud83d\udfe2 2. Python's Root and Ecosystem \ud83d\udc0d Origin: Created by Guido van Rossum in the late 1980s. First released in 1991 . Name inspired by the British comedy group Monty Python , not the snake. \ud83c\udf0d Ecosystem: Rich set of libraries (e.g., NumPy, Pandas, Matplotlib) Package management through pip Large developer community Popular frameworks: Django, Flask, FastAPI for web; TensorFlow, PyTorch for AI/ML \ud83d\udfe2 3. Python Installation & IDEs Setting Up \u2699\ufe0f Installation: - Recommended: Install latest version from https://www.python.org \ud83d\udcbb Popular IDEs for Python: Google Colab (cloud-based, no installation needed) Jupyter Notebook (ideal for data science, interactive coding) VS Code (lightweight, customizable) PyCharm (feature-rich, professional-grade) \u27a4 Example: Running Python in Google Colab 1. Visit https://colab.research.google.com Click \"New Notebook\" Write your Python code and press Shift + Enter to run # Simple Python code in Colab print(\"Step 1: Write code. Step 2: Debug. Step 3: Cry. Repeat.\") \ud83d\udfe2 4. Python Framework & Syntax Python Syntax Basics: - Case-sensitive Indentation defines blocks (no curly braces) Easy to read and write # Printing a message print(\"I thought Python was a snake... why am I coding?\") # Indentation defines code blocks x = 10 if x > 5: print(\"x is greater than 5\") Let's try basic operations: Printing messages Simple arithmetic Using variables # Print statement print(\"Python: Less hiss, more code.\") # Arithmetic operations a = 5 b = 3 print(\"Sum:\", a + b) print(\"Difference:\", a - b) print(\"Product:\", a * b) print(\"Division:\", a / b) \u2705 Python is simple, versatile, and powerful \u2705 Created by Guido van Rossum \u2705 Strong ecosystem with packages & frameworks \u2705 Available in multiple IDEs (Colab, Jupyter, VS Code) \u2705 Indentation is critical in Python \u2705 Hands-on coding encouraged \ud83d\udcdd Practice Exercises Print your name using Python. Try basic arithmetic operations (addition, subtraction, multiplication, division). Explore Google Colab or Jupyter Notebook and run your first Python code.","title":"Introduction to Python"},{"location":"lectures/1.Introduction/#python-programming-introduction-to-python","text":"","title":"\ud83d\udcd3 Python Programming - Introduction to Python"},{"location":"lectures/1.Introduction/#1-what-exactly-is-python","text":"Python is a high-level, interpreted, general-purpose programming language known for its simplicity and readability. It is widely used for: Web Development Data Science Machine Learning & AI Automation & Scripting Software Development Game Development Key Features: Easy to learn & use Open-source & community-driven Extensive libraries & frameworks Cross-platform Supports multiple programming paradigms (procedural, object-oriented, functional)","title":"\ud83d\udfe2 1. What exactly is Python?"},{"location":"lectures/1.Introduction/#2-pythons-root-and-ecosystem","text":"\ud83d\udc0d Origin: Created by Guido van Rossum in the late 1980s. First released in 1991 . Name inspired by the British comedy group Monty Python , not the snake. \ud83c\udf0d Ecosystem: Rich set of libraries (e.g., NumPy, Pandas, Matplotlib) Package management through pip Large developer community Popular frameworks: Django, Flask, FastAPI for web; TensorFlow, PyTorch for AI/ML","title":"\ud83d\udfe2 2. Python's Root and Ecosystem"},{"location":"lectures/1.Introduction/#3-python-installation-ides-setting-up","text":"\u2699\ufe0f Installation: - Recommended: Install latest version from https://www.python.org \ud83d\udcbb Popular IDEs for Python: Google Colab (cloud-based, no installation needed) Jupyter Notebook (ideal for data science, interactive coding) VS Code (lightweight, customizable) PyCharm (feature-rich, professional-grade) \u27a4 Example: Running Python in Google Colab 1. Visit https://colab.research.google.com Click \"New Notebook\" Write your Python code and press Shift + Enter to run # Simple Python code in Colab print(\"Step 1: Write code. Step 2: Debug. Step 3: Cry. Repeat.\")","title":"\ud83d\udfe2 3. Python Installation &amp; IDEs Setting Up"},{"location":"lectures/1.Introduction/#4-python-framework-syntax","text":"Python Syntax Basics: - Case-sensitive Indentation defines blocks (no curly braces) Easy to read and write # Printing a message print(\"I thought Python was a snake... why am I coding?\") # Indentation defines code blocks x = 10 if x > 5: print(\"x is greater than 5\")","title":"\ud83d\udfe2 4. Python Framework &amp; Syntax"},{"location":"lectures/1.Introduction/#lets-try-basic-operations","text":"Printing messages Simple arithmetic Using variables # Print statement print(\"Python: Less hiss, more code.\") # Arithmetic operations a = 5 b = 3 print(\"Sum:\", a + b) print(\"Difference:\", a - b) print(\"Product:\", a * b) print(\"Division:\", a / b) \u2705 Python is simple, versatile, and powerful \u2705 Created by Guido van Rossum \u2705 Strong ecosystem with packages & frameworks \u2705 Available in multiple IDEs (Colab, Jupyter, VS Code) \u2705 Indentation is critical in Python \u2705 Hands-on coding encouraged","title":"Let's try basic operations:"},{"location":"lectures/1.Introduction/#practice-exercises","text":"Print your name using Python. Try basic arithmetic operations (addition, subtraction, multiplication, division). Explore Google Colab or Jupyter Notebook and run your first Python code.","title":"\ud83d\udcdd Practice Exercises"},{"location":"lectures/2.DataTypes/","text":"\ud83d\udcd3 Python Programming - Python Basics \ud83d\udfe2 1. Data Types & Variables What are Variables? Variables are containers for storing data values. No need to declare the type explicitly (Python is dynamically typed). Common Data Types in Python: str \u2192 String (text) int \u2192 Integer (whole numbers) float \u2192 Floating-point numbers (decimals) complex \u2192 Complex numbers (real + imaginary) bool \u2192 Boolean (True/False) None \u2192 Represents the absence of a value (null-like) # String name = \"Alice\" print(name,type(name)) # Integer age = 25 print(age,type(age)) # Float height = 5.7 print(height,type(height)) # Complex z = 2 + 3j print(z,type(z)) # Boolean is_student = True print(is_student,type(is_student)) # None Type data = None print(data,type(data)) one = 1 two = 2 three = one + two print(three) hello = \"hello\" world = \"world\" helloworld = hello + \" \" + world print(helloworld) \ud83d\udfe2 2. Input and Output Functions Output: print() - Used to display information to the console. Input: input() - Takes input from the user as a string. # Output print(\"Hello, World!\") # Input name = input(\"Enter your name: \") print(\"Welcome,\", name) \ud83d\udfe2 3. Working with format() Method, f-Strings, & Escape Sequences String Formatting: format() method inserts variables into strings. f-strings (Python 3.6+) provide a concise way to embed expressions inside string literals. Escape Sequences: \\n \u2192 New line \\t \u2192 Tab space \\\\ \u2192 Backslash \\\" or \\' \u2192 Quotes # Using format() name = \"Vini\" age = 23 print(\"My name is {} and I am {} years old.\".format(name, age)) # Using f-strings print(f\"My name is {name} and I am {age} years old.\") # Escape sequences print(\"Hello\\tWorld\") # Tab print(\"Line 1\\nLine 2\") # New line print(\"She said, \\\"Python is fun!\\\"\") name = \"John\" print(\"Hello, %s!\" % name) mylist = [1,2,3] print(\"A list: %s\" % mylist) Hello, John! A list: [1, 2, 3] %s - String (or any object with a string representation, like numbers) %d - Integers %f - Floating point numbers %.<number of digits>f - Floating point numbers with a fixed amount of digits to the right of the dot. %x/%X - Integers in hex representation (lowercase/uppercase) \ud83d\udfe2 4. Basic Arithmetic & Operators Arithmetic Operators: - + \u2192 Addition - \u2192 Subtraction * \u2192 Multiplication / \u2192 Division // \u2192 Floor Division (discards remainder) % \u2192 Modulus (remainder) ** \u2192 Exponent (power) a = 10 b = 3 print(\"Addition:\", a + b) print(\"Subtraction:\", a - b) print(\"Multiplication:\", a * b) print(\"Division:\", a / b) print(\"Floor Division:\", a // b) print(\"Modulus:\", a % b) print(\"Exponent:\", a ** b) \ud83d\udfe2 5. Type Casting, Type Checking, & Validation Type Casting: Convert one data type to another using functions like int() , float() , str() , etc. Type Checking: Use type() function to check the data type. Simple Validation Example: Check if the input is numeric using .isdigit() . # Type Casting x = \"5\" y = int(x) # Convert string to integer print(y + 2) # Output: 7 # Type Checking print(type(y)) # Output: <class 'int'> # Validation Example user_input = input(\"Enter a number: \") if user_input.isdigit(): print(\"You entered:\", int(user_input)) else: print(\"Invalid input. Please enter a number.\") Quick Recap \u2705 Python supports multiple data types (string, int, float, etc.) \u2705 Variables store data values dynamically \u2705 Use print() for output and input() for taking user input \u2705 String formatting with format() and f-strings \u2705 Arithmetic operations are straightforward \u2705 Type casting, checking, and basic input validation enhance reliability \ud83d\udcdd Practice Exercises Q. The target of this exercise is to create a string, an integer, and a floating point number. The string should be named mystring and should contain the word \"hello\". The floating point number should be named myfloat and should contain the number 10.0, and the integer should be named myint and should contain the number 20. Declare variables for your name, age, and height. Print them using f-strings. Ask the user for two numbers and print their sum. Write a program to check if the user entered a valid number. Experiment with escape sequences to format output. Use nested loops to print a pattern like: * ** *** **** ***** ****** ***** **** *** ** * * *** ***** ******* ********* *********** Solution max = 6 print(\"=\"*15) for i in range(max): print(f'{\"*\" * (i)}') print(\"=\"*15) for i in range(max): print(f'{\"*\" * (max - i)}') print(\"=\"*15) for i in range(1,max+1): print(\" \" * (max - i) + \"*\" * (2 * i - 1)) print(\"=\"*15) Solution: # change this code mystring = \"hello\" myfloat = 10.0 myint = 20 # testing code if mystring == \"hello\": print(\"String: %s\" % mystring) if isinstance(myfloat, float) and myfloat == 10.0: print(\"Float: %f\" % myfloat) if isinstance(myint, int) and myint == 20: print(\"Integer: %d\" % myint)","title":"Data Types"},{"location":"lectures/2.DataTypes/#python-programming-python-basics","text":"","title":"\ud83d\udcd3 Python Programming - Python Basics"},{"location":"lectures/2.DataTypes/#1-data-types-variables","text":"","title":"\ud83d\udfe2 1. Data Types &amp; Variables"},{"location":"lectures/2.DataTypes/#what-are-variables","text":"Variables are containers for storing data values. No need to declare the type explicitly (Python is dynamically typed).","title":"What are Variables?"},{"location":"lectures/2.DataTypes/#common-data-types-in-python","text":"str \u2192 String (text) int \u2192 Integer (whole numbers) float \u2192 Floating-point numbers (decimals) complex \u2192 Complex numbers (real + imaginary) bool \u2192 Boolean (True/False) None \u2192 Represents the absence of a value (null-like) # String name = \"Alice\" print(name,type(name)) # Integer age = 25 print(age,type(age)) # Float height = 5.7 print(height,type(height)) # Complex z = 2 + 3j print(z,type(z)) # Boolean is_student = True print(is_student,type(is_student)) # None Type data = None print(data,type(data)) one = 1 two = 2 three = one + two print(three) hello = \"hello\" world = \"world\" helloworld = hello + \" \" + world print(helloworld)","title":"Common Data Types in Python:"},{"location":"lectures/2.DataTypes/#2-input-and-output-functions","text":"Output: print() - Used to display information to the console. Input: input() - Takes input from the user as a string. # Output print(\"Hello, World!\") # Input name = input(\"Enter your name: \") print(\"Welcome,\", name)","title":"\ud83d\udfe2 2. Input and Output Functions"},{"location":"lectures/2.DataTypes/#3-working-with-format-method-f-strings-escape-sequences","text":"","title":"\ud83d\udfe2 3. Working with format() Method, f-Strings, &amp; Escape Sequences"},{"location":"lectures/2.DataTypes/#string-formatting","text":"format() method inserts variables into strings. f-strings (Python 3.6+) provide a concise way to embed expressions inside string literals.","title":"String Formatting:"},{"location":"lectures/2.DataTypes/#escape-sequences","text":"\\n \u2192 New line \\t \u2192 Tab space \\\\ \u2192 Backslash \\\" or \\' \u2192 Quotes # Using format() name = \"Vini\" age = 23 print(\"My name is {} and I am {} years old.\".format(name, age)) # Using f-strings print(f\"My name is {name} and I am {age} years old.\") # Escape sequences print(\"Hello\\tWorld\") # Tab print(\"Line 1\\nLine 2\") # New line print(\"She said, \\\"Python is fun!\\\"\") name = \"John\" print(\"Hello, %s!\" % name) mylist = [1,2,3] print(\"A list: %s\" % mylist) Hello, John! A list: [1, 2, 3] %s - String (or any object with a string representation, like numbers) %d - Integers %f - Floating point numbers %.<number of digits>f - Floating point numbers with a fixed amount of digits to the right of the dot. %x/%X - Integers in hex representation (lowercase/uppercase)","title":"Escape Sequences:"},{"location":"lectures/2.DataTypes/#4-basic-arithmetic-operators","text":"Arithmetic Operators: - + \u2192 Addition - \u2192 Subtraction * \u2192 Multiplication / \u2192 Division // \u2192 Floor Division (discards remainder) % \u2192 Modulus (remainder) ** \u2192 Exponent (power) a = 10 b = 3 print(\"Addition:\", a + b) print(\"Subtraction:\", a - b) print(\"Multiplication:\", a * b) print(\"Division:\", a / b) print(\"Floor Division:\", a // b) print(\"Modulus:\", a % b) print(\"Exponent:\", a ** b)","title":"\ud83d\udfe2 4. Basic Arithmetic &amp; Operators"},{"location":"lectures/2.DataTypes/#5-type-casting-type-checking-validation","text":"","title":"\ud83d\udfe2 5. Type Casting, Type Checking, &amp; Validation"},{"location":"lectures/2.DataTypes/#type-casting","text":"Convert one data type to another using functions like int() , float() , str() , etc.","title":"Type Casting:"},{"location":"lectures/2.DataTypes/#type-checking","text":"Use type() function to check the data type.","title":"Type Checking:"},{"location":"lectures/2.DataTypes/#simple-validation-example","text":"Check if the input is numeric using .isdigit() . # Type Casting x = \"5\" y = int(x) # Convert string to integer print(y + 2) # Output: 7 # Type Checking print(type(y)) # Output: <class 'int'> # Validation Example user_input = input(\"Enter a number: \") if user_input.isdigit(): print(\"You entered:\", int(user_input)) else: print(\"Invalid input. Please enter a number.\")","title":"Simple Validation Example:"},{"location":"lectures/2.DataTypes/#quick-recap","text":"\u2705 Python supports multiple data types (string, int, float, etc.) \u2705 Variables store data values dynamically \u2705 Use print() for output and input() for taking user input \u2705 String formatting with format() and f-strings \u2705 Arithmetic operations are straightforward \u2705 Type casting, checking, and basic input validation enhance reliability","title":"Quick Recap"},{"location":"lectures/2.DataTypes/#practice-exercises","text":"Q. The target of this exercise is to create a string, an integer, and a floating point number. The string should be named mystring and should contain the word \"hello\". The floating point number should be named myfloat and should contain the number 10.0, and the integer should be named myint and should contain the number 20. Declare variables for your name, age, and height. Print them using f-strings. Ask the user for two numbers and print their sum. Write a program to check if the user entered a valid number. Experiment with escape sequences to format output. Use nested loops to print a pattern like: * ** *** **** ***** ****** ***** **** *** ** * * *** ***** ******* ********* ***********","title":"\ud83d\udcdd Practice Exercises"},{"location":"lectures/2.DataTypes/#solution","text":"max = 6 print(\"=\"*15) for i in range(max): print(f'{\"*\" * (i)}') print(\"=\"*15) for i in range(max): print(f'{\"*\" * (max - i)}') print(\"=\"*15) for i in range(1,max+1): print(\" \" * (max - i) + \"*\" * (2 * i - 1)) print(\"=\"*15) Solution: # change this code mystring = \"hello\" myfloat = 10.0 myint = 20 # testing code if mystring == \"hello\": print(\"String: %s\" % mystring) if isinstance(myfloat, float) and myfloat == 10.0: print(\"Float: %f\" % myfloat) if isinstance(myint, int) and myint == 20: print(\"Integer: %d\" % myint)","title":"Solution"}]}